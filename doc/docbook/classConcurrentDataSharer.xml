<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="classConcurrentDataSharer">
<title>ConcurrentDataSharer class Reference</title>
<para>
    <programlisting>#include <link linkend="concurrentdatasharer_8h">&lt;concurrentdatasharer.h&gt;</link></programlisting>
</para>
<para>Inheritance diagram for ConcurrentDataSharer</para>
<para>
    <figure>
        <title>Inheritance graph</title>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="1" fileref="classConcurrentDataSharer__inherit__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </figure>
</para>
<para>Collaboration diagram for ConcurrentDataSharer</para>
<para>
    <figure>
        <title>Collaboration graph</title>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="1" fileref="classConcurrentDataSharer__coll__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </figure>
</para>
        <section>
            <title>Private Attributes</title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>const std::string _groupName<para><emphasis>name of the group</emphasis></para></para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>const boost::asio::ip::address multicast_address<para><emphasis>the multicast adress</emphasis></para></para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>const boost::asio::ip::address listen_address<para><emphasis>the multicast listening adress</emphasis></para></para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>const short multicast_port<para><emphasis>the multicast port</emphasis></para></para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>const std::string _name<para><emphasis>this clients name</emphasis></para></para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>BlockingQueue&lt; QueueElementBase * &gt; * _multiSendQueue<para><emphasis>queue used to send QueueElementMultiSend elements to _multiSendThread</emphasis></para></para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>BlockingQueue&lt; QueueElementBase * &gt; * _recvQueue<para><emphasis>queue used by _TCPRecvThread and _multiRecvThread to send QueueElementBase to _mainThread</emphasis></para></para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>BlockingQueue&lt; QueueElementBase * &gt; * _TCPSendQueue<para><emphasis>queue used to send QueueElementTCPSend elements to _TCPSendThread</emphasis></para></para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>boost::thread * _mainThread<para><emphasis>threads that handles data from _TCPRecvThread and _multiRecvThread</emphasis></para></para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>boost::thread * _TCPSendThread<para><emphasis>thread which is used to send TCP packages</emphasis></para></para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>boost::thread * _TCPRecvThread<para><emphasis>thread used to receive TCP packages</emphasis></para></para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>boost::thread * _multiSendThread<para><emphasis>thread used to send UDP packages</emphasis></para></para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>boost::thread * _multiRecvThread<para><emphasis>thread used to receive UDP packages</emphasis></para></para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>std::unordered_map&lt; std::string, DataBaseElement * &gt; _dataBase<para><emphasis>the database storing local variables</emphasis></para></para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>boost::asio::ip::udp::socket * socket_recv<para><emphasis>socket used for receiving UDP packages</emphasis></para></para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>boost::asio::ip::udp::endpoint sender_endpoint_<para><emphasis>UDP receiving endpoint.</emphasis></para></para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>const std::size_t header_size_<para><emphasis>header size for both UDP and TCP packages</emphasis></para></para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>boost::asio::io_service io_service_recv<para><emphasis>UDP io_service.</emphasis></para></para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>boost::asio::io_service io_service_send<para><emphasis>UDP sending io_service.</emphasis></para></para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>boost::asio::ip::udp::endpoint * endpoint_<para><emphasis>UDP sending endpoint.</emphasis></para></para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>boost::asio::ip::udp::socket * socket_send<para><emphasis>UDP sending socket.</emphasis></para></para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>boost::asio::io_service io_service_TCP_recv<para><emphasis>TCP sending io_service.</emphasis></para></para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>const short TCP_recv_port<para><emphasis>TCP sending port, should be set in constructor.</emphasis></para></para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>boost::asio::io_service io_service_TCP_send<para><emphasis>TCP sending io_service.</emphasis></para></para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>std::unordered_map&lt; std::string, QueueElementTCPSend * &gt; _requests<para><emphasis>map for request send to other clients</emphasis></para></para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>std::unordered_map&lt; std::string, clientData * &gt; _clients<para><emphasis>map for storing clients</emphasis></para></para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>clientData * _myself<para><emphasis>this clients clientData</emphasis></para></para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>std::mutex * _clientLock<para><emphasis>lock for locking down _clients since it can be access from user side</emphasis></para></para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>CallbackSig newClientCallback<para><emphasis>function pointer for new client callback</emphasis></para></para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title></title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para> <link linkend="classConcurrentDataSharer_1a31adaa38a46a75059bc117aa3b889ead">ConcurrentDataSharer</link> (
std::string const &amp; groupname, std::string const &amp; multicastadress, std::string const &amp; listenadress, const short multicastport)<para><emphasis>Constructor.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para> <link linkend="classConcurrentDataSharer_1abfb5ed7099ae718277bdbfeef362c8c9">~ConcurrentDataSharer</link> (
)<para><emphasis>Destructor.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="classConcurrentDataSharer_1a61da465e07a98d3b35d5f646d6ebaa33">set</link> (
std::string const &amp; name, T data)<para><emphasis>Set a local variable, creates it if it does not exists.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>T <link linkend="classConcurrentDataSharer_1ab843e7ba2687921eee926d5ec3251ec2">get</link> (
std::string const &amp; name)<para><emphasis>Get a local variable.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>T <link linkend="classConcurrentDataSharer_1a00a171243dde5f2b957f8e338d2fb4cd">get</link> (
std::string const &amp; client, std::string const &amp; name)<para><emphasis>Get a variable from another client.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>std::vector&lt; std::string &gt; <link linkend="classConcurrentDataSharer_1a10ac5344381b73c61368634efcff7350">getClients</link> (
)<para><emphasis>to get all connected clients</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="classConcurrentDataSharer_1af49ca1b3094d8e5991032aff3e26a39a">registerNewClientCallback</link> (
CallbackSig func)<para><emphasis>connects a callback when a new clients connects</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="classConcurrentDataSharer_1ab1f7d71cb857152ae4c9f5559a3ad32e">registerCallback</link> (
std::string const &amp; name, CallbackSig func)<para><emphasis>connects a callback if a local variable changes</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>std::string <link linkend="classConcurrentDataSharer_1a7bdc1d74f0d94a9855121f0ddb496bde">getMyName</link> (
)<para><emphasis>return the name of this client</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>std::vector&lt; std::string &gt; <link linkend="classConcurrentDataSharer_1aba0ce899cc2994d381ab59fb359b8a25">getClientVariables</link> (
std::string const &amp; client)<para><emphasis>get a list with the names of a clients variables</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title></title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para> <link linkend="classConcurrentDataSharer_1a27d8d6e83a7e62fac60c9f40558cb68c">ConcurrentDataSharer</link> (
)<para><emphasis>deleted default constructor</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>std::string <link linkend="classConcurrentDataSharer_1ab4b5c4830387497594d1ae6bac252ee3">generateRandomName</link> (
std::size_t len)<para><emphasis>generate a random string</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>std::vector&lt; std::string &gt; <link linkend="classConcurrentDataSharer_1a7e741dfa071071f72176602e7f565eb9">getLocalIPV4Adresses</link> (
)<para><emphasis>returns a list with this clients IPV4 adresses</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>std::vector&lt; std::string &gt; <link linkend="classConcurrentDataSharer_1acc52c9887248a21d66ff3fde2c50c577">getLocalIPV6Adresses</link> (
)<para><emphasis>returns a list with this clients IPV6 adresses</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="classConcurrentDataSharer_1a0b515d261c99273aecf35ca0fdaa3e2c">mainLoop</link> (
)<para><emphasis>target function for the main thread _mainThread which access the _dataBase</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="classConcurrentDataSharer_1ab93b934572b7da16a24ff5f44df53c84">TCPRecv</link> (
)<para><emphasis>target function for the TCP thread _TCPRecvThread which accepts TCP connections and creates a TCP handler with TCPRecvSession as target function</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="classConcurrentDataSharer_1ae158a7142b404ca57350ba05d8562664">TCPSend</link> (
)<para><emphasis>target function for the TCP thread _TCPSendThread which takes QueueElementBase from _TCPSendQueue and creates a connection and sends the package to the endpoint</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="classConcurrentDataSharer_1a93e0f5cf5523c7e77200769994a65a1b">MultiSend</link> (
)<para><emphasis>target function for the UDP thread _multiSendThread which takes QueueElementBase from _multiSendQueue and broadcast the message</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="classConcurrentDataSharer_1a251381d3669a5ea14683de720977224c">MultiRecv</link> (
)<para><emphasis>target function for the UDP thread _multiRecvThread which listens for UDP packages and puts them in the _recvQueue queue</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="classConcurrentDataSharer_1ac3f2032e005286ae6fc35d9fabe2edf8">IntroduceMyselfToGroup</link> (
)<para><emphasis>sends out an broadcast over the LAN introducing this clients</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="classConcurrentDataSharer_1a241ebb79c06a640ec81818072ee64854">handleTCPRecv</link> (
<link linkend="classQueueElementBase">QueueElementBase</link> * )<para><emphasis>used in the mainloop to handle TCP packages</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="classConcurrentDataSharer_1a0bc3aff674e98c241e53080fd0d18b53">TCPRecvSession</link> (
boost::shared_ptr&lt; boost::asio::ip::tcp::socket &gt; sock)<para><emphasis>Target function for threads created in TCPRecv which reads data from socket.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="classConcurrentDataSharer_1a1a64d3bfc4061b1acf2393961e782b9e">handleQueueElementTCPSend</link> (
<link linkend="classQueueElementTCPSend">QueueElementTCPSend</link> * )<para><emphasis>used in mainLoop to handle TCP packages</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="classConcurrentDataSharer_1a02f823d07b418c79652cafca209b242c">handleMultiRecv</link> (
<link linkend="classQueueElementBase">QueueElementBase</link> * )<para><emphasis>used in mainLoop to handle UDP packages</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="classConcurrentDataSharer_1a38e58af47c57294a209e3280e7e3ca98">handleMultiRecvData</link> (
const boost::system::error_code &amp; error, size_t bytes_recvd)<para><emphasis>handler used in MultiRecv for receiving UDP data</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="classConcurrentDataSharer_1aac4f917612ae33d76f106632411780d0">handleMultiSendError</link> (
const boost::system::error_code &amp; error, size_t )<para><emphasis>error handlar in MultiSend</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
    <simplesect>

<para>ConcurrentDataSharer* sharer = new <link linkend="classConcurrentDataSharer">ConcurrentDataSharer</link>(&quot;test&quot;); sharer-&gt;set&lt;int&gt;(&quot;data&quot;,43); sharer-&gt;set&lt;int&gt;(&quot;data1&quot;,42);. </para>
    </simplesect>
        <simplesect>
            <title>Detailed Description</title>

<para>This is the main class for the <link linkend="classConcurrentDataSharer">ConcurrentDataSharer</link></para>

<para><formalpara><title>Note: </title>

<para>This is the shit</para>
</formalpara>
<formalpara><title>Author: </title>

<para>Martin Soderen</para>
</formalpara>
<formalpara><title>Version: </title>

<para>0.1</para>
</formalpara>
<formalpara><title>Date: </title>

<para>2017/04/147 00:00:00</para>
</formalpara>
Contact: <link xlink:href="mailto:martin.soderen@gmail.com">martin.soderen@gmail.com</link></para>

<para>Created on: Fri Apr 14 00:00:00 2017</para>

<para><formalpara><title></title>
<title>Id</title></formalpara>
</para>
                <para>Definition at line 64 of file concurrentdatasharer.h</para>
                <para>The Documentation for this struct was generated from the following file: </para>
                <para><itemizedlist><listitem><para>concurrentdatasharer.h</para></listitem></itemizedlist></para>
        </simplesect>
        <section>
            <title>Member Data Documentation</title>
        </section>
            <section xml:id="classConcurrentDataSharer_1a31adaa38a46a75059bc117aa3b889ead">
                <title>ConcurrentDataSharer::ConcurrentDataSharer (std::string const &amp;groupname, std::string const &amp;multicastadress=&quot;239.255.0.1&quot;, std::string const &amp;listenadress=&quot;0.0.0.0&quot;, const short multicastport=30001)</title> <emphasis>Constructor.</emphasis>
                
<para>
                <formalpara>
                    <title/>
                    <table frame="all">
                        <title>Parameters                        </title>
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>groupname</entry>
                                <entry>
<para>the name for the ConcurrentDatasharer group to share data with </para>
</entry>
                            </row>
                            <row>
                                <entry>multicastadress</entry>
                                <entry>
<para>the adress for UDP broadcasting, default is 239.255.0.1 </para>
</entry>
                            </row>
                            <row>
                                <entry>listenadress</entry>
                                <entry>
<para>the adress for UDP broadcasting listening, default is 0.0.0.0 </para>
</entry>
                            </row>
                            <row>
                                <entry>multicastport</entry>
                                <entry>
<para>the port for UDP broadcasting, default is 30001 </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                </formalpara>
                </para>

            </section>
            <section xml:id="classConcurrentDataSharer_1abfb5ed7099ae718277bdbfeef362c8c9">
                <title>ConcurrentDataSharer::~ConcurrentDataSharer ()</title> <emphasis>Destructor.</emphasis>
                
<para>Destructs objects </para>

            </section>
            <section xml:id="classConcurrentDataSharer_1a61da465e07a98d3b35d5f646d6ebaa33">
                <title>void ConcurrentDataSharer::set (std::string const &amp;name, T data)</title> <emphasis>Set a local variable, creates it if it does not exists.</emphasis>
                
<para>
                <formalpara>
                    <title/>
                    <table frame="all">
                        <title>Parameters                        </title>
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>name</entry>
                                <entry>
<para>the name of the variable </para>
</entry>
                            </row>
                            <row>
                                <entry>data</entry>
                                <entry>
<para>the data </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                </formalpara>
                </para>

            </section>
            <section xml:id="classConcurrentDataSharer_1ab843e7ba2687921eee926d5ec3251ec2">
                <title>T ConcurrentDataSharer::get (std::string const &amp;name)</title> <emphasis>Get a local variable.</emphasis>
                
<para>
                <formalpara>
                    <title/>
                    <table frame="all">
                        <title>Parameters                        </title>
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>name</entry>
                                <entry>
<para>the name of the variable </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                </formalpara>
                </para>

            </section>
            <section xml:id="classConcurrentDataSharer_1a00a171243dde5f2b957f8e338d2fb4cd">
                <title>T ConcurrentDataSharer::get (std::string const &amp;client, std::string const &amp;name)</title> <emphasis>Get a variable from another client.</emphasis>
                
<para>
                <formalpara>
                    <title/>
                    <table frame="all">
                        <title>Parameters                        </title>
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>client</entry>
                                <entry>
<para>the name of the client </para>
</entry>
                            </row>
                            <row>
                                <entry>name</entry>
                                <entry>
<para>the name of the variable </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                </formalpara>
                </para>

            </section>
            <section xml:id="classConcurrentDataSharer_1a10ac5344381b73c61368634efcff7350">
                <title>std::vector&lt; std::string &gt; ConcurrentDataSharer::getClients ()</title> <emphasis>to get all connected clients</emphasis>
                
<para><formalpara><title>Returns: </title>

<para>std::vector&lt;std::string&gt; with the names of all the clients </para>
</formalpara>
</para>

            </section>
            <section xml:id="classConcurrentDataSharer_1af49ca1b3094d8e5991032aff3e26a39a">
                <title>void ConcurrentDataSharer::registerNewClientCallback (CallbackSig func)</title> <emphasis>connects a callback when a new clients connects</emphasis>
                
<para>
                <formalpara>
                    <title/>
                    <table frame="all">
                        <title>Parameters                        </title>
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>func</entry>
                                <entry>
<para>the function to connect </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                </formalpara>
                </para>

            </section>
            <section xml:id="classConcurrentDataSharer_1ab1f7d71cb857152ae4c9f5559a3ad32e">
                <title>void ConcurrentDataSharer::registerCallback (std::string const &amp;name, CallbackSig func)</title> <emphasis>connects a callback if a local variable changes</emphasis>
                
<para>
                <formalpara>
                    <title/>
                    <table frame="all">
                        <title>Parameters                        </title>
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>name</entry>
                                <entry>
<para>the name of the variable </para>
</entry>
                            </row>
                            <row>
                                <entry>func</entry>
                                <entry>
<para>the function to connect with change </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                </formalpara>
                </para>

            </section>
            <section xml:id="classConcurrentDataSharer_1a7bdc1d74f0d94a9855121f0ddb496bde">
                <title>std::string ConcurrentDataSharer::getMyName ()</title> <emphasis>return the name of this client</emphasis>
                
<para><formalpara><title>Returns: </title>

<para>the name of this client </para>
</formalpara>
</para>

            </section>
            <section xml:id="classConcurrentDataSharer_1aba0ce899cc2994d381ab59fb359b8a25">
                <title>std::vector&lt; std::string &gt; ConcurrentDataSharer::getClientVariables (std::string const &amp;client)</title> <emphasis>get a list with the names of a clients variables</emphasis>
                
<para>
                <formalpara>
                    <title/>
                    <table frame="all">
                        <title>Parameters                        </title>
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>client</entry>
                                <entry>
<para>the name of the client </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                </formalpara>
                <formalpara><title>Returns: </title>

<para>a list with the names of a clients variables </para>
</formalpara>
</para>

            </section>
            <section xml:id="classConcurrentDataSharer_1a27d8d6e83a7e62fac60c9f40558cb68c">
                <title>ConcurrentDataSharer::ConcurrentDataSharer ()</title> <emphasis>deleted default constructor</emphasis>
                
            </section>
            <section xml:id="classConcurrentDataSharer_1ab4b5c4830387497594d1ae6bac252ee3">
                <title>std::string ConcurrentDataSharer::generateRandomName (std::size_t len)</title> <emphasis>generate a random string</emphasis>
                
<para>
                <formalpara>
                    <title/>
                    <table frame="all">
                        <title>Parameters                        </title>
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>len</entry>
                                <entry>
<para>the length of the random string </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                </formalpara>
                <formalpara><title>Returns: </title>

<para>a random string </para>
</formalpara>
</para>

            </section>
            <section xml:id="classConcurrentDataSharer_1a7e741dfa071071f72176602e7f565eb9">
                <title>std::vector&lt; std::string &gt; ConcurrentDataSharer::getLocalIPV4Adresses ()</title> <emphasis>returns a list with this clients IPV4 adresses</emphasis>
                
<para><formalpara><title>Returns: </title>

<para>a list with this clients IPV4 adresses </para>
</formalpara>
</para>

            </section>
            <section xml:id="classConcurrentDataSharer_1acc52c9887248a21d66ff3fde2c50c577">
                <title>std::vector&lt; std::string &gt; ConcurrentDataSharer::getLocalIPV6Adresses ()</title> <emphasis>returns a list with this clients IPV6 adresses</emphasis>
                
<para><formalpara><title>Returns: </title>

<para>a list with this clients IPV6 adresses </para>
</formalpara>
</para>

            </section>
            <section xml:id="classConcurrentDataSharer_1a0b515d261c99273aecf35ca0fdaa3e2c">
                <title>void ConcurrentDataSharer::mainLoop ()</title> <emphasis>target function for the main thread _mainThread which access the _dataBase</emphasis>
                
<para><formalpara><title>See also: </title>

<para>ConcurrentDataSharer::_mainThread </para>
<simplesect/>
<para>ConcurrentDataSharer::_recvQueue </para>
<simplesect/>
<para>ConcurrentDataSharer::_dataBase </para>
<simplesect/>
<para>ConcurrentDataSharer::_dataBase </para>
<simplesect/>
<para>ConcurrentDataSharer::handleTCPRecv(QueueElementBase*) </para>
<simplesect/>
<para>ConcurrentDataSharer::handleQueueElementTCPSend(QueueElementTCPSend*); It takes <link linkend="classQueueElementBase">QueueElementBase</link> from _recvQueue and decides which function to use using dynamic_cast </para>
</formalpara>
</para>

            </section>
            <section xml:id="classConcurrentDataSharer_1ab93b934572b7da16a24ff5f44df53c84">
                <title>void ConcurrentDataSharer::TCPRecv ()</title> <emphasis>target function for the TCP thread _TCPRecvThread which accepts TCP connections and creates a TCP handler with TCPRecvSession as target function</emphasis>
                
<para><formalpara><title>See also: </title>

<para>ConcurrentDataSharer::TCPRecvSession() </para>
<simplesect/>
<para>ConcurrentDataSharer::_TCPRecvThread </para>
</formalpara>
</para>

            </section>
            <section xml:id="classConcurrentDataSharer_1ae158a7142b404ca57350ba05d8562664">
                <title>void ConcurrentDataSharer::TCPSend ()</title> <emphasis>target function for the TCP thread _TCPSendThread which takes QueueElementBase from _TCPSendQueue and creates a connection and sends the package to the endpoint</emphasis>
                
<para><formalpara><title>See also: </title>

<para>ConcurrentDataSharer::TCPRecvSession() </para>
<simplesect/>
<para>ConcurrentDataSharer::_TCPSendThread </para>
</formalpara>
</para>

            </section>
            <section xml:id="classConcurrentDataSharer_1a93e0f5cf5523c7e77200769994a65a1b">
                <title>void ConcurrentDataSharer::MultiSend ()</title> <emphasis>target function for the UDP thread _multiSendThread which takes QueueElementBase from _multiSendQueue and broadcast the message</emphasis>
                
<para><formalpara><title>See also: </title>

<para>ConcurrentDataSharer::handleMultiSendError() </para>
<simplesect/>
<para>ConcurrentDataSharer::_multiSendThread </para>
</formalpara>
</para>

            </section>
            <section xml:id="classConcurrentDataSharer_1a251381d3669a5ea14683de720977224c">
                <title>void ConcurrentDataSharer::MultiRecv ()</title> <emphasis>target function for the UDP thread _multiRecvThread which listens for UDP packages and puts them in the _recvQueue queue</emphasis>
                
<para><formalpara><title>See also: </title>

<para>ConcurrentDataSharer::_multiRecvThread </para>
</formalpara>
</para>

            </section>
            <section xml:id="classConcurrentDataSharer_1ac3f2032e005286ae6fc35d9fabe2edf8">
                <title>void ConcurrentDataSharer::IntroduceMyselfToGroup ()</title> <emphasis>sends out an broadcast over the LAN introducing this clients</emphasis>
                
            </section>
            <section xml:id="classConcurrentDataSharer_1a241ebb79c06a640ec81818072ee64854">
                <title>void ConcurrentDataSharer::handleTCPRecv (QueueElementBase *)</title> <emphasis>used in the mainloop to handle TCP packages</emphasis>
                
<para><formalpara><title>See also: </title>

<para>ConcurrentDataSharer::_mainThread </para>
<simplesect/>
<para>ConcurrentDataSharer::mainLoop() </para>
</formalpara>
</para>

            </section>
            <section xml:id="classConcurrentDataSharer_1a0bc3aff674e98c241e53080fd0d18b53">
                <title>void ConcurrentDataSharer::TCPRecvSession (boost::shared_ptr&lt; boost::asio::ip::tcp::socket &gt; sock)</title> <emphasis>Target function for threads created in TCPRecv which reads data from socket.</emphasis>
                
<para><formalpara><title>See also: </title>

<para>ConcurrentDataSharer::TCPRecv </para>
</formalpara>
</para>

            </section>
            <section xml:id="classConcurrentDataSharer_1a1a64d3bfc4061b1acf2393961e782b9e">
                <title>void ConcurrentDataSharer::handleQueueElementTCPSend (QueueElementTCPSend *)</title> <emphasis>used in mainLoop to handle TCP packages</emphasis>
                
<para><formalpara><title>See also: </title>

<para>ConcurrentDataSharer::mainLoop() </para>
</formalpara>
</para>

            </section>
            <section xml:id="classConcurrentDataSharer_1a02f823d07b418c79652cafca209b242c">
                <title>void ConcurrentDataSharer::handleMultiRecv (QueueElementBase *)</title> <emphasis>used in mainLoop to handle UDP packages</emphasis>
                
<para><formalpara><title>See also: </title>

<para>ConcurrentDataSharer::mainLoop() </para>
</formalpara>
</para>

            </section>
            <section xml:id="classConcurrentDataSharer_1a38e58af47c57294a209e3280e7e3ca98">
                <title>void ConcurrentDataSharer::handleMultiRecvData (const boost::system::error_code &amp;error, size_t bytes_recvd)</title> <emphasis>handler used in MultiRecv for receiving UDP data</emphasis>
                
<para><formalpara><title>See also: </title>

<para>ConcurrentDataSharer::MultiRecv() </para>
</formalpara>
</para>

            </section>
            <section xml:id="classConcurrentDataSharer_1aac4f917612ae33d76f106632411780d0">
                <title>void ConcurrentDataSharer::handleMultiSendError (const boost::system::error_code &amp;error, size_t)</title> <emphasis>error handlar in MultiSend</emphasis>
                
<para><formalpara><title>See also: </title>

<para>ConcurrentDataSharer::MultiSend() </para>
</formalpara>
</para>

            </section>
</section>
