<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="classBlockingQueue">
<title>BlockingQueue class Reference</title>
<para>
    <programlisting>#include <link linkend="BlockingQueue_8h">&lt;BlockingQueue.h&gt;</link></programlisting>
</para>
<para>Inheritance diagram for BlockingQueue</para>
<para>
    <figure>
        <title>Inheritance graph</title>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="1" fileref="classBlockingQueue__inherit__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </figure>
</para>
<para>Collaboration diagram for BlockingQueue</para>
<para>
    <figure>
        <title>Collaboration graph</title>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="1" fileref="classBlockingQueue__coll__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </figure>
</para>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
    </templateparamlist>
        <section>
            <title>Private Attributes</title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>std::mutex mtx<para><emphasis>lock</emphasis></para></para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>std::condition_variable full_<para><emphasis>condition variable</emphasis></para></para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>std::condition_variable empty_<para><emphasis>condition variable</emphasis></para></para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>std::queue&lt; T &gt; queue_<para><emphasis>the underlying queue</emphasis></para></para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>size_t capacity_<para><emphasis>the capacity</emphasis></para></para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title></title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para> <link linkend="classBlockingQueue_1a42f821a61ba22ba27e6d1a434ab27eb2">BlockingQueue</link> (
)<para><emphasis>Constructor.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para> <link linkend="classBlockingQueue_1adfb84eb73f882a364c8f4cb325b22a1a">BlockingQueue</link> (
std::size_t capacity)<para><emphasis>Constructor.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="classBlockingQueue_1aeda6a5448ed9b96a56fa1143e6e8ad1c">Put</link> (
const T &amp; task)<para><emphasis>put an element in the queue, blocks if full</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>T <link linkend="classBlockingQueue_1a38dd122eba62f8b5d7ddc1aae266e8da">Take</link> (
)<para><emphasis>take an element from the queue, blocks if empty</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>T <link linkend="classBlockingQueue_1a1890f7159b58b97ca1cade42bce9e982">Front</link> (
)<para><emphasis>returns the front element(been longest in the queue), does not pop, blocks if empty</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>T <link linkend="classBlockingQueue_1ad2e79734669baee7eeb90e43e9e5d6b9">Back</link> (
)<para><emphasis>returns the back element(been shortest in the queue), does not pop, blocks if empty</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>size_t <link linkend="classBlockingQueue_1acf02cc9e5671442f6f66c156d9cbe431">Size</link> (
)<para><emphasis>returns the number of elements in the queue</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="classBlockingQueue_1ae7884eb98569730e5cea0e443d5bb661">Empty</link> (
)<para><emphasis>returns true if the queue is empty</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="classBlockingQueue_1ab3d6fd8cc72986de54213ebdef01245d">SetCapacity</link> (
const size_t capacity)<para><emphasis>sets the capacity of the queue</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title></title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para> <link linkend="classBlockingQueue_1af7d1d558add0ab855ce49e29765c08b6">BlockingQueue</link> (
const <link linkend="classBlockingQueue">BlockingQueue</link> &amp; rhs)<para><emphasis>deleted copy constructor</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="classBlockingQueue">BlockingQueue</link> &amp; <link linkend="classBlockingQueue_1a3ee9c77f59e142aef1a84d2e0bb3613c">operator=</link> (
const <link linkend="classBlockingQueue">BlockingQueue</link> &amp; rhs)<para><emphasis>deleted = operator</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
    <simplesect>

<para>_TCPSendQueue = new <link linkend="classBlockingQueue">BlockingQueue&lt;QueueElementBase*&gt;(255)</link>; _TCPSendQueue-&gt;put(new QueueElementBase() ); </para>
    </simplesect>
        <simplesect>
            <title>Detailed Description</title>

<para>This is a blocking thread safe FIFO queue</para>

<para><formalpara><title>Author: </title>

<para>Martin Soderen</para>
</formalpara>
<formalpara><title>Version: </title>

<para>0.1</para>
</formalpara>
<formalpara><title>Date: </title>

<para>2017/04/147 00:00:00</para>
</formalpara>
Contact: <link xlink:href="mailto:martin.soderen@gmail.com">martin.soderen@gmail.com</link></para>

<para>Created on: Fri Apr 14 00:00:00 2017</para>

<para><formalpara><title></title>
<title>Id</title></formalpara>
</para>
                <para>Definition at line 44 of file BlockingQueue.h</para>
                <para>The Documentation for this struct was generated from the following file: </para>
                <para><itemizedlist><listitem><para>BlockingQueue.h</para></listitem></itemizedlist></para>
        </simplesect>
        <section>
            <title>Member Data Documentation</title>
        </section>
            <section xml:id="classBlockingQueue_1a42f821a61ba22ba27e6d1a434ab27eb2">
                <title>BlockingQueue&lt; T &gt;::BlockingQueue ()</title> <emphasis>Constructor.</emphasis>
                
<para>
                <formalpara>
                    <title/>
                    <table frame="all">
                        <title>Parameters                        </title>
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>&lt;T&gt;</entry>
                                <entry>
<para>template </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                </formalpara>
                </para>

            </section>
            <section xml:id="classBlockingQueue_1adfb84eb73f882a364c8f4cb325b22a1a">
                <title>BlockingQueue&lt; T &gt;::BlockingQueue (std::size_t capacity)</title> <emphasis>Constructor.</emphasis>
                
<para>
                <formalpara>
                    <title/>
                    <table frame="all">
                        <title>Parameters                        </title>
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>&lt;T&gt;</entry>
                                <entry>
<para>template </para>
</entry>
                            </row>
                            <row>
                                <entry>capacity</entry>
                                <entry>
<para>how many elements you can fill </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                </formalpara>
                </para>

            </section>
            <section xml:id="classBlockingQueue_1aeda6a5448ed9b96a56fa1143e6e8ad1c">
                <title>void BlockingQueue&lt; T &gt;::Put (const T &amp;task)</title> <emphasis>put an element in the queue, blocks if full</emphasis>
                
<para>
                <formalpara>
                    <title/>
                    <table frame="all">
                        <title>Parameters                        </title>
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>task</entry>
                                <entry>
<para>element to put in queue </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                </formalpara>
                </para>

            </section>
            <section xml:id="classBlockingQueue_1a38dd122eba62f8b5d7ddc1aae266e8da">
                <title>T BlockingQueue&lt; T &gt;::Take ()</title> <emphasis>take an element from the queue, blocks if empty</emphasis>
                
<para><formalpara><title>Returns: </title>

<para>element </para>
</formalpara>
</para>

            </section>
            <section xml:id="classBlockingQueue_1a1890f7159b58b97ca1cade42bce9e982">
                <title>T BlockingQueue&lt; T &gt;::Front ()</title> <emphasis>returns the front element(been longest in the queue), does not pop, blocks if empty</emphasis>
                
<para><formalpara><title>Returns: </title>

<para>element </para>
</formalpara>
</para>

            </section>
            <section xml:id="classBlockingQueue_1ad2e79734669baee7eeb90e43e9e5d6b9">
                <title>T BlockingQueue&lt; T &gt;::Back ()</title> <emphasis>returns the back element(been shortest in the queue), does not pop, blocks if empty</emphasis>
                
<para><formalpara><title>Returns: </title>

<para>element </para>
</formalpara>
</para>

            </section>
            <section xml:id="classBlockingQueue_1acf02cc9e5671442f6f66c156d9cbe431">
                <title>size_t BlockingQueue&lt; T &gt;::Size ()</title> <emphasis>returns the number of elements in the queue</emphasis>
                
<para><formalpara><title>Returns: </title>

<para>size of queue </para>
</formalpara>
</para>

            </section>
            <section xml:id="classBlockingQueue_1ae7884eb98569730e5cea0e443d5bb661">
                <title>bool BlockingQueue&lt; T &gt;::Empty ()</title> <emphasis>returns true if the queue is empty</emphasis>
                
<para><formalpara><title>Returns: </title>

<para>bool if empty </para>
</formalpara>
</para>

            </section>
            <section xml:id="classBlockingQueue_1ab3d6fd8cc72986de54213ebdef01245d">
                <title>void BlockingQueue&lt; T &gt;::SetCapacity (const size_t capacity)</title> <emphasis>sets the capacity of the queue</emphasis>
                
<para>
                <formalpara>
                    <title/>
                    <table frame="all">
                        <title>Parameters                        </title>
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>capacity</entry>
                                <entry>
<para>the new capacity of the queue </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                </formalpara>
                </para>

            </section>
            <section xml:id="classBlockingQueue_1af7d1d558add0ab855ce49e29765c08b6">
                <title>BlockingQueue&lt; T &gt;::BlockingQueue (const BlockingQueue &amp;rhs)</title> <emphasis>deleted copy constructor</emphasis>
                
            </section>
            <section xml:id="classBlockingQueue_1a3ee9c77f59e142aef1a84d2e0bb3613c">
                <title>BlockingQueue&amp; BlockingQueue&lt; T &gt;::operator= (const BlockingQueue &amp;rhs)</title> <emphasis>deleted = operator</emphasis>
                
            </section>
</section>
